/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    //
    // Corne Key Positions
    //
    // | 0  | 1  | 2  | 3  | 4  | 5  |   | 6  | 7  | 8  | 9  | 10 | 11 |
    // | 12 | 13 | 14 | 15 | 16 | 17 |   | 18 | 19 | 20 | 21 | 22 | 23 |
    // | 24 | 25 | 26 | 27 | 28 | 29 |   | 30 | 31 | 32 | 33 | 34 | 35 |
    //                | 36 | 37 | 38 |   | 39 | 40 | 41 |
    //

    #define LEFT_HAND_KEYS      \
          0  1  2  3  4  5      \
         12 13 14 15 16 17      \
         24 25 26 27 28 29

    #define RIGHT_HAND_KEYS     \
                                        6  7  8  9 10 11 \
                                       18 19 20 21 22 23 \
                                       30 31 32 33 34 35 

    #define THUMB_KEYS   36 37 38   39 40 41

    #define HOMEY_HOLDING_TYPE "tap-preferred"
    #define INDEX_HOLDING_TYPE "tap-preferred"

    //
    // HOMEY_HOLDING_TIME defines how long you need to hold (milliseconds)
    // home row mod keys in order to send their modifiers to the computer
    // (i.e. "register" them) for mod-click mouse usage (e.g. Ctrl-Click).
    //
    #define HOMEY_HOLDING_TIME 270 // expert (100ms)
    #define INDEX_HOLDING_TIME 170


    //
    // HOMEY_STREAK_DECAY defines how long you need to wait (milliseconds)
    // after typing before you can use home row mods again.  It prevents
    // unintended activation of home row mods when you're actively typing.
    //
    #define INDEX_STREAK_DECAY 150
    #define HOMEY_STREAK_DECAY 250
    

    //
    // HOMEY_REPEAT_DECAY defines how much time you have left (milliseconds)
    // after tapping a key to hold it again in order to make it auto-repeat.
    //
    #define INDEX_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
    #define HOMEY_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
    behaviors {
        left_pinky: homey_left_pinky {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <HOMEY_HOLDING_TIME>;
            quick-tap-ms = <HOMEY_REPEAT_DECAY>;
            require-prior-idle-ms = <HOMEY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        right_pinky: homey_right_pinky {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <HOMEY_HOLDING_TIME>;
            quick-tap-ms = <HOMEY_REPEAT_DECAY>;
            require-prior-idle-ms = <HOMEY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        left_ring: homey_left_ring {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <HOMEY_HOLDING_TIME>;
            quick-tap-ms = <HOMEY_REPEAT_DECAY>;
            require-prior-idle-ms = <HOMEY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        right_ring: homey_right_ring {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <HOMEY_HOLDING_TIME>;
            quick-tap-ms = <HOMEY_REPEAT_DECAY>;
            require-prior-idle-ms = <HOMEY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        left_middy: homey_left_middy {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <HOMEY_HOLDING_TIME>;
            quick-tap-ms = <HOMEY_REPEAT_DECAY>;
            require-prior-idle-ms = <HOMEY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        right_middy: homey_right_middy {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <HOMEY_HOLDING_TIME>;
            quick-tap-ms = <HOMEY_REPEAT_DECAY>;
            require-prior-idle-ms = <HOMEY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        left_index: homey_left_index {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <INDEX_HOLDING_TIME>;
            quick-tap-ms = <INDEX_REPEAT_DECAY>;
            require-prior-idle-ms = <INDEX_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        right_index: homey_right_index {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <INDEX_HOLDING_TIME>;
            quick-tap-ms = <INDEX_REPEAT_DECAY>;
            require-prior-idle-ms = <INDEX_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
    };

    // MACROS **********************

    macros {
        switch_window: switch_window {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 4 &kp LALT>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 4 &kp LALT>;
        };

        fat_arrow_macro: fat_arrow_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp EQUAL &kp GREATER_THAN>;

            label = "FAT_ARROW_MACRO";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_l_layer {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <6 7>;
            timeout-ms = <50>;
        };

        combo_r_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <8 9>;
        };

        open_paren {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <18 19>;
        };

        close_paren {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <20 21>;
        };

        open_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <31 30>;
        };

        close_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <32 33>;
        };

        dash {
            bindings = <&kp MINUS>;
            key-positions = <19 20>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <31 32>;
        };

        nav_layer {
            bindings = <&mo 4>;
            key-positions = <13 38>;
        };

        keypad {
            bindings = <&mo 3>;
            key-positions = <38 15>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <21 22>;
        };

        switch {
            bindings = <&switch_window>;
            key-positions = <1 2>;
        };

        left_shift {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <25 26>;
        };

        right_shift {
            bindings = <&sk RIGHT_SHIFT>;
            key-positions = <33 34>;
        };

        combo_caps {
            bindings = <&caps_word>;
            key-positions = <16 19>;
        };

        equals {
            bindings = <&kp KP_EQUAL>;
            key-positions = <7 8>;
        };

        combo_delete {
            bindings = <&kp DELETE>;
            key-positions = <10 11>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |             
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB         &kp Q                   &kp W                  &kp E                &kp R                     &kp T      &kp Y      &kp U                  &kp I                 &kp O                    &kp P     &kp BSPC
&kp CAPS        &left_pinky LEFT_GUI A  &left_ring LEFT_ALT S  &left_middy LCTRL D  &left_index LEFT_SHIFT F  &kp G      &kp H      &right_index RSHIFT J  &right_middy RCTRL K  &right_ring RIGHT_ALT L  &kp SEMI  &kp SQT
&sk LEFT_SHIFT  &kp Z                   &kp X                  &kp C                &kp V                     &kp B      &kp N      &kp M                  &kp COMMA             &kp DOT                  &kp FSLH  &sk RIGHT_SHIFT
                                                               &kp LEFT_GUI         &kp LEFT_CONTROL          &kp RET    &kp SPACE  &to 1                  &to 3
            >;
        };

        numbers_top_row {
            bindings = <
&kp GRAVE  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4    &kp N5    &kp NUMBER_6  &kp N7           &kp N8     &kp N9         &kp N0  &trans
&trans     &trans        &kp LEFT_ALT  &kp LCTRL     &kp LEFT_SHIFT  &trans    &trans        &kp RIGHT_SHIFT  &kp RCTRL  &kp RIGHT_ALT  &trans  &trans
&trans     &trans        &trans        &trans        &trans          &trans    &trans        &trans           &trans     &trans         &trans  &trans
                                       &to 0         &to 0           &trans    &trans        &to 2            &to 2
            >;
        };

        symbols {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TILDE  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp BSPC
&none      &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT         &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC         &kp RBRC  &kp PIPE  &kp TILDE
                             &to 0     &to 1     &trans       &trans     &to 3      &to 3
            >;
        };

        numpad {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp KP_EQUAL  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_MINUS  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans        &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_PLUS   &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp KP_N0     &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD    &trans
                        &to 0   &to 2   &trans    &trans        &trans           &kp KP_NUMBER_0
            >;
        };

        nav_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &none   &none         &none             &none           &none     &none     &kp HOME  &kp UP    &kp PAGE_UP    &none    &kp BSPC
&none      &none   &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &none     &kp HOME  &kp LEFT  &kp DOWN  &kp RIGHT      &kp END  &trans
&kp LSHFT  &trans  &trans        &trans            &trans          &trans    &trans    &kp END   &kp DOWN  &kp PAGE_DOWN  &trans   &trans
                                 &to 0             &trans          &trans    &trans    &trans    &none
            >;
        };

        bluetooth {
            bindings = <
&trans      &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                        &to 0         &trans        &trans          &trans  &none   &trans
            >;
        };
    };
};
